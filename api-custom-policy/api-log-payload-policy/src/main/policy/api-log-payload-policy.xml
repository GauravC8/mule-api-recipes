<?xml version="1.0" encoding="UTF-8"?>
<policy
    xmlns="http://www.mulesoft.org/schema/mule/policy"
    xmlns:mule="http://www.mulesoft.org/schema/mule/core"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
    xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
    xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
    xmlns:json="http://www.mulesoft.org/schema/mule/json"
        xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd
              http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd              
              http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
              http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
              http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
              http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd"
              id="2" policyName="Request/response Logging">
    <before>
			
        <mule:set-variable variableName="payloadBck" value="#[payload]" />
        <mule:logger message="#################################################" level="INFO"/>
        <mule:set-payload value="#[flowVars['payloadBck']]" />
		
        <!-- Logs a payload and an external payload, if configured. In case of the input stream, the stream is read and reset.-->
        <mule:choice>
            <mule:when expression="{{ log-payload }}">
                <mule:choice>
                    <mule:when expression="#[payload instanceof java.io.InputStream]">
                        <mule:set-variable variableName="bf" value="#[new java.io.BufferedInputStream(payload)]" />
                        <mule:expression-component>
                            <![CDATA[flowVars['bf'].mark(Integer.MAX_VALUE)]]>
                        </mule:expression-component>
                        <mule:set-variable variableName="payloadValue" value="#[org.apache.commons.io.IOUtils.toString(flowVars['bf'], 'UTF-8')]" />                       
                    </mule:when>
					<mule:when expression="#[payload instanceof byte[]]">
						<mule:set-variable variableName="payloadValue" value="#[new String(payload, 'UTF-8')]" />
					</mule:when>
                    <mule:otherwise>
                        <mule:set-variable variableName="payloadValue" value="#[payload]" />                        
                    </mule:otherwise>
        </mule:choice>
            
				<!-- pretty printing -->
		
				
					
				<mule:set-payload value="#[flowVars['payloadValue']]"/>
				<mule:set-variable variableName="newLine" value="#[System.getProperty('line.separator')]" />
				<mule:logger message="Request Payload #['[' + message.getId() + ']:'+flowVars.'newLine'+flowVars.'payloadValue']" level="INFO" />
				
				
				<mule:set-payload value="#[flowVars['payloadBck']]" />
		
				<!-- handling of InputStream after pretty printing -->
				<mule:choice>
					<mule:when expression="#[payload instanceof java.io.InputStream]">					
						<mule:expression-component>
							<![CDATA[flowVars['bf'].reset()]]>
						</mule:expression-component>					
						<mule:set-payload value="#[bf]"/>
					</mule:when>					
					<mule:otherwise>
						<mule:expression-component>
							<![CDATA[String dummyVar = "Dummy component"]]>
						</mule:expression-component>
					</mule:otherwise>
				</mule:choice>
			</mule:when>
			<mule:otherwise>
				<mule:expression-component>
					<![CDATA[String dummyVar = "Dummy component"]]>
				</mule:expression-component>
			</mule:otherwise>
				
        </mule:choice>
		
        <mule:remove-variable variableName="payloadBck" />
        <mule:remove-variable variableName="payloadValue" />
        <mule:remove-variable variableName="bf" />
        <mule:remove-variable variableName="newLine" />		
    </before>
    <!-- This is the message that gets logged in case of responses. Applied according to the pointcut specified below. -->
    <after>
		
        <mule:set-variable variableName="payloadBck" value="#[payload]" />
       
        <mule:logger message="##################################################" level="INFO"/>
        <mule:set-payload value="#[flowVars['payloadBck']]" />
			
        <mule:choice>
            <mule:when expression="{{ log-payload }}">
				<!-- handling OutputHandler -->
                <mule:choice>
                    <mule:when expression="#[payload instanceof org.mule.api.transport.OutputHandler]">                        
                        <mule:custom-transformer class="org.mule.transformer.simple.ObjectToInputStream"/>
                    </mule:when>
                    <mule:otherwise>
                        <mule:logger message="Response Payload [#[message.getId()]] is of not of type org.mule.api.transport.OutputHandler ..." level="INFO"/>
                    </mule:otherwise>
                </mule:choice>
                
				<!-- transforming payload to String data type -->
				<mule:choice>
                    <mule:when expression="#[payload instanceof java.io.InputStream]">
                        <mule:set-variable variableName="bf" value="#[new java.io.BufferedInputStream(payload)]" />
                        <mule:expression-component>
                            <![CDATA[flowVars['bf'].mark(Integer.MAX_VALUE)]]>
                        </mule:expression-component>
                        <mule:set-variable variableName="payloadValue" value="#[org.apache.commons.io.IOUtils.toString(flowVars['bf'], 'UTF-8')]" />                       
                    </mule:when>
					<mule:when expression="#[payload instanceof byte[]]">
						<mule:set-variable variableName="payloadValue" value="#[new String(payload, 'UTF-8')]" />
					</mule:when>
                    <mule:otherwise>
                        <mule:set-variable variableName="payloadValue" value="#[payload]" />                        
                    </mule:otherwise>
                </mule:choice>
            
				<!-- pretty printing -->
			
				<mule:set-variable variableName="newLine" value="#[System.getProperty('line.separator')]" />
				<mule:logger message="Response Payload #['[' + message.getId() + ']:'+flowVars.'newLine'+flowVars.'payloadValue']" level="INFO" />
				
				<!-- logging the exception payload -->
				<mule:choice>
					<mule:when expression="#[groovy: message.getExceptionPayload() != null]">
						<mule:logger message="Response Exception Payload [#[message.getId()]]: #[groovy: 'Code: ' + message.getExceptionPayload().getCode()  + ' ' + message.getExceptionPayload().getRootException() + ' ' + message.getExceptionPayload().getMessage() + ' ' + message.getExceptionPayload().getInfo()]" level="INFO"/>
					</mule:when>
					<mule:otherwise>
						<mule:expression-component>
							<![CDATA[String dummyVar = "Dummy component"]]>
						</mule:expression-component>
					</mule:otherwise>
				</mule:choice>
				
				<mule:set-payload value="#[payloadBck]"/>
				<!-- handling of InputStream after pretty printing -->
				<mule:choice>
					<mule:when expression="#[payload instanceof java.io.InputStream]">					
						<mule:expression-component>
							<![CDATA[flowVars['bf'].reset()]]>
						</mule:expression-component>					
						<mule:set-payload value="#[bf]"/>
					</mule:when>					
					<mule:otherwise>
						<mule:expression-component>
							<![CDATA[String dummyVar = "Dummy component"]]>
						</mule:expression-component>
					</mule:otherwise>
				</mule:choice>
												
            </mule:when>
            <mule:otherwise>
                <mule:logger message="Response Payload [#[message.getId()]] is of not of type InputStream ..." level="INFO"/>
            </mule:otherwise>
        </mule:choice>
        <mule:remove-variable variableName="payloadBck" />
        <mule:remove-variable variableName="payloadValue" />
        <mule:remove-variable variableName="bf" />		
    </after>
    <!-- Pointcuts specify where this policy takes effect. It refers to an specific Api and Version -->
    <pointcut>
        <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
    </pointcut>
</policy>